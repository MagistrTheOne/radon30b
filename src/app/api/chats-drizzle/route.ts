import { NextRequest, NextResponse } from 'next/server'
import { auth, currentUser } from '@clerk/nextjs/server'
import { db, users, chats, subscriptions } from '@/lib/db'
import { eq } from 'drizzle-orm'

/**
 * GET /api/chats-drizzle - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function GET(_request: NextRequest) {
  try {
    const { userId } = await auth()

    if (!userId) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      )
    }

    // –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –ø–æ Clerk ID
    let user
    try {
      user = await db.query.users.findFirst({
        where: eq(users.clerkId, userId),
        with: {
          chats: {
            orderBy: (chats, { desc }) => [desc(chats.createdAt)],
            with: {
              messages: {
                columns: {
                  id: true,
                }
              }
            }
          }
        }
      })
    } catch (dbError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', dbError)
      return NextResponse.json(
        {
          error: 'Database connection error',
          details: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        },
        { status: 503 }
      )
    }

    if (!user) {
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
      console.log(`üë§ –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è Clerk ID: ${userId}`)
      try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Clerk
        const clerkUser = await currentUser()
        const userEmail = clerkUser?.emailAddresses[0]?.emailAddress || `${userId}@radon.ai`
        const userName = clerkUser?.firstName && clerkUser?.lastName 
          ? `${clerkUser.firstName} ${clerkUser.lastName}`
          : clerkUser?.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'

        const [newUser] = await db.insert(users).values({
          clerkId: userId,
          email: userEmail,
          name: userName,
        }).returning()

        // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        await db.insert(subscriptions).values({
          userId: newUser.id,
          tier: 'free'
        })

        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${newUser.id} (${userEmail})`)
        user = newUser
      } catch (createError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', createError)
        return NextResponse.json(
          {
            error: 'Failed to create user',
            details: '–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.'
          },
          { status: 500 }
        )
      }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∞—Ç—ã –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const formattedChats = user.chats?.map((chat) => ({
      id: chat.id,
      title: chat.title,
      createdAt: chat.createdAt.toISOString(),
      messageCount: chat.messages?.length || 0
    })) || []

    return NextResponse.json(formattedChats)

  } catch (error) {
    console.error('Error fetching chats:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}

/**
 * POST /api/chats-drizzle - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç
 */
export async function POST(request: NextRequest) {
  try {
    const { userId } = await auth()

    if (!userId) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      )
    }

    const body = await request.json()
    const { title } = body

    if (!title || typeof title !== 'string') {
      return NextResponse.json(
        { error: 'Title is required' },
        { status: 400 }
      )
    }

    // –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –ø–æ Clerk ID
    let user
    try {
      user = await db.query.users.findFirst({
        where: eq(users.clerkId, userId)
      })
    } catch (dbError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', dbError)
      return NextResponse.json(
        {
          error: 'Database connection error',
          details: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        },
        { status: 503 }
      )
    }

    if (!user) {
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
      console.log(`üë§ –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è Clerk ID: ${userId}`)
      try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Clerk
        const clerkUser = await currentUser()
        const userEmail = clerkUser?.emailAddresses[0]?.emailAddress || `${userId}@radon.ai`
        const userName = clerkUser?.firstName && clerkUser?.lastName 
          ? `${clerkUser.firstName} ${clerkUser.lastName}`
          : clerkUser?.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'

        const [newUser] = await db.insert(users).values({
          clerkId: userId,
          email: userEmail,
          name: userName,
        }).returning()

        // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        await db.insert(subscriptions).values({
          userId: newUser.id,
          tier: 'free'
        })

        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${newUser.id} (${userEmail})`)
        user = newUser
      } catch (createError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', createError)
        return NextResponse.json(
          {
            error: 'Failed to create user',
            details: '–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.'
          },
          { status: 500 }
        )
      }
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
    const [newChat] = await db.insert(chats).values({
      userId: user.id,
      title: title.trim()
    }).returning()

    const formattedChat = {
      id: newChat.id,
      title: newChat.title,
      createdAt: newChat.createdAt.toISOString(),
      messageCount: 0
    }

    return NextResponse.json(formattedChat, { status: 201 })

  } catch (error) {
    console.error('Error creating chat:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}
