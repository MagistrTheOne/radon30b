// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  clerkId         String   @unique
  email           String   @unique
  name            String?
  imageUrl        String?
  subscription    String   @default("free")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  chats           Chat[]
  subscriptionData Subscription?
  usageLogs       UsageLog[]
  ownedTeams      Team[]       @relation("TeamOwner")
  teamMemberships TeamMember[]
}

model Chat {
  id          String     @id @default(cuid())
  userId      String
  workspaceId String?
  title       String
  createdAt   DateTime   @default(now())
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace? @relation(fields: [workspaceId], references: [id], onDelete: SetNull)
  messages    Message[]
}

model Message {
  id                  String   @id @default(cuid())
  chatId              String
  role                String
  content             String   @db.Text
  imageUrl            String?
  audioUrl            String?
  audioTranscription  String?  @db.Text
  audioDuration       Int?     // в секундах
  // Новые поля для API v2.0.0
  functionCalls       Json?    // Function calls в JSON формате
  personalityUsed     String?  // Использованная личность
  conversationId      String?  // ID разговора в Radon API
  createdAt           DateTime @default(now())
  editedAt            DateTime?
  isEdited            Boolean  @default(false)
  chat                Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  edits               MessageEdit[]
}

model Subscription {
  id                String   @id @default(cuid())
  userId            String   @unique
  tier              String   @default("free") // free, pro, team, enterprise
  status            String   @default("active") // active, cancelled, expired
  currentPeriodEnd  DateTime?
  stripeCustomerId  String?  @unique
  stripeSubscriptionId String? @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UsageLog {
  id        String   @id @default(cuid())
  userId    String
  action    String   // message, api_call, image_analysis
  count     Int      @default(1)
  date      DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id])
  @@index([userId, date])
}

model Team {
  id          String   @id @default(cuid())
  name        String
  ownerId     String
  maxUsers    Int      @default(10)
  createdAt   DateTime @default(now())
  
  owner       User     @relation("TeamOwner", fields: [ownerId], references: [id])
  members     TeamMember[]
  workspaces  Workspace[]
}

model TeamMember {
  id        String   @id @default(cuid())
  teamId    String
  userId    String
  role      String   @default("member") // admin, member
  createdAt DateTime @default(now())
  
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([teamId, userId])
}

model Workspace {
  id          String   @id @default(cuid())
  teamId      String
  name        String
  createdAt   DateTime @default(now())
  
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  chats       Chat[]
}

model MessageEdit {
  id              String   @id @default(cuid())
  messageId       String
  previousContent String   @db.Text
  editedAt        DateTime @default(now())
  
  message         Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model AdminUser {
  id           String    @id @default(cuid())
  userId       String    @unique
  email        String    @unique
  role         String    @default("admin") // admin, super_admin, owner
  permissions  Json      @default("[]")
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  lastLoginAt  DateTime?
  updatedAt    DateTime  @updatedAt
}

model ContactRequest {
  id          String   @id @default(cuid())
  name        String
  email       String
  subject     String
  message     String   @db.Text
  type        String   @default("contact") // contact, support, gdpr, bug_report
  status      String   @default("new") // new, in_progress, resolved, closed
  userAgent   String?
  ipAddress   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  resolvedAt  DateTime?
}
