import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function createMissingSubscriptions() {
  try {
    console.log('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø–æ–¥–ø–∏—Å–æ–∫...')
    
    // –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø–æ–¥–ø–∏—Å–æ–∫
    const usersWithoutSubscriptions = await prisma.user.findMany({
      where: {
        subscriptionData: null
      }
    })

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${usersWithoutSubscriptions.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø–æ–¥–ø–∏—Å–æ–∫`)

    if (usersWithoutSubscriptions.length === 0) {
      console.log('‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ –∏–º–µ—é—Ç –ø–æ–¥–ø–∏—Å–∫–∏')
      return
    }

    // –°–æ–∑–¥–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø–æ–¥–ø–∏—Å–æ–∫
    const subscriptions = usersWithoutSubscriptions.map(user => ({
      userId: user.id,
      tier: 'free',
      status: 'active'
    }))

    const result = await prisma.subscription.createMany({
      data: subscriptions,
      skipDuplicates: true
    })

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${result.count} –ø–æ–¥–ø–∏—Å–æ–∫`)
    console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫:', error)
  } finally {
    await prisma.$disconnect()
  }
}

createMissingSubscriptions()
